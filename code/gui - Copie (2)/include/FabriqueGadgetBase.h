#ifndef FABRIQUEGADGETBASE__H
#define FABRIQUEGADGETBASE__H

/////////////////////////////////////////////////
// Headers
/////////////////////////////////////////////////

//#include "Gui.h"
#include "Gadget.h"
#include <memory>

namespace gui {

class Gui;


/////////////////////////////////////////////////
/// \brief la fabrique de gadget (GOF4)
///
/////////////////////////////////////////////////
struct FabriqueGadgetBase {


/////////////////////////////////////////////////
// Méthodes
/////////////////////////////////////////////////
public:

    /////////////////////////////////////////////////
    /// \brief Constructeur par défaut
    ///
    /// \param gui le gestionnaire d'interface graphique parent
    ///
    /////////////////////////////////////////////////
    FabriqueGadgetBase ( gui::Gui* interface );


    /////////////////////////////////////////////////
    /// \brief Creer un bouton.
    ///
    /// \param texte		 Le texte du bouton.
    /////////////////////////////////////////////////
    Gadget::ptr bouton (std::string texte = "");

    /////////////////////////////////////////////////
    /// \brief Creer un label.
    ///
    /// \param texte		 Le texte du label
    /////////////////////////////////////////////////
    Gadget::ptr label (std::string texte = "Label");

    /////////////////////////////////////////////////
    /// \brief Creer une image. (à voir si on peut gerer direct le fichier par l'intermediaire du ressourceMgr)
    ///
    /// \param fichier		 Le fichier image
    /////////////////////////////////////////////////
    Gadget::ptr image (std::string fichier);

    /////////////////////////////////////////////////
    // Les membres
    /////////////////////////////////////////////////

private:
    Gui*   m_gui;

}; // fin class FabriqueGadgetBase

} // fin namespace gui

#endif
