#ifndef GADGET__H
#define GADGET__H

/////////////////////////////////////////////////
// Headers
/////////////////////////////////////////////////
#include "Composite.h"
#include "Interaction.h"
#include "Geometrie.h"



namespace gui {



/////////////////////////////////////////////////
/// \brief Classe communes à tout les gadgets, gère affichage actualisation, etc...
///
/////////////////////////////////////////////////
class Gadget : public gui::Composite, public gui::Interaction, public gui::Geometrie {



/////////////////////////////////////////////////
// Méthodes
/////////////////////////////////////////////////

public:
public:
    /////////////////////////////////////////////////
    /// \brief Constructeur par défaut.
    ///
    /////////////////////////////////////////////////
    Gadget ();

    /////////////////////////////////////////////////
    /// \brief Constructeur de recopie (pour gerer les pointeurs).
    ///
    /// \param original		 Le gadget a recopier.
    /////////////////////////////////////////////////
    Gadget (Gadget & original);

    /////////////////////////////////////////////////
    /// \brief Surcharge de l'operateur =.
    ///
    /// \param original		 
    /////////////////////////////////////////////////
    Gadget& operator= (Gadget & original);

    /////////////////////////////////////////////////
    /// \brief Definir l'activité du gadget.
    ///
    /// \param etat		 le nouvel etat du gadget (actif ou inactif).
    /////////////////////////////////////////////////
    void setActif (bool etat);

    /////////////////////////////////////////////////
    /// \brief Acceder à l'activité du gadget.
    ///
    /////////////////////////////////////////////////
    bool getActif () const;

    /////////////////////////////////////////////////
    /// \brief Definir à la visibilité du gadget.
    ///
    /// \param valeur		 
    /////////////////////////////////////////////////
    void setVisible (bool valeur);

    /////////////////////////////////////////////////
    /// \brief Definir la visibilité du gadget.
    ///
    /////////////////////////////////////////////////
    bool getVisible () const;

protected:
    /////////////////////////////////////////////////
    /// \brief Initialiser les composants, les interactions (GOF4 : Patron de méthode).
    ///
    /////////////////////////////////////////////////
    void initialiser ();

    /////////////////////////////////////////////////
    /// \brief Initialise les composant du gadgets.
    ///
    /////////////////////////////////////////////////
    virtual void initialiser_composants () = 0;

    /////////////////////////////////////////////////
    /// \brief Initialise les interactions des composant du gadgets.
    ///
    /////////////////////////////////////////////////
    virtual void initialiser_interactions () = 0;

    /////////////////////////////////////////////////
    /// \brief Actualiser les géométrie du gadgets avec skin, et donc ses bounds.
    ///
    /////////////////////////////////////////////////
    virtual void actualiser () = 0;

    /////////////////////////////////////////////////
    /// \brief  Traitement des évènements  du gadget.
    ///
    /// \param evenement		 L'evenemnt SFML à traiter.
    /////////////////////////////////////////////////
    virtual void traiter_events (const sf::Event& evenement);

    /////////////////////////////////////////////////
    /// \brief Dessiner le gadget => dessiner ses enfants.
    ///
    /// \param target		 
    /// \param states		 
    /////////////////////////////////////////////////
    virtual void draw (sf::RenderTarget& target, sf::RenderStates states) const;



/////////////////////////////////////////////////
// Membres
/////////////////////////////////////////////////
private:
    bool m_actif;    ///< le gadget est il actif ?    
    bool m_visible;    ///< est il visible ? ( si non visible : inactif ?)    

}; // fin class Gadget

} // fin namespace gui

#endif
